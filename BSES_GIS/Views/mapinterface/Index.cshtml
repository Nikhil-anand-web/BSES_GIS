@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}



<link href="~/lib/arcgis-js-api/assets/esri/themes/light/main.css" rel="stylesheet" />


<div  id="viewData" style="height:800px; width:100%; position:fixed;margin-top:60px">
    
 
</div>


@section Scripts{





    <script data-main="lib/arcgis-js-api/" src="~/lib/requirejs/require.js"></script>


    

    <script>
        require([
            
            "Map",
            "views/MapView",
            "layers/MapImageLayer",
            "Graphic",
            "layers/GraphicsLayer",
            "rest/query",
            "rest/support/Query",
            "geometry/Point",
            "Basemap",
            "layers/support/TileInfo",
            "views/draw/Draw",
            "views/draw/PolygonDrawAction",
            "geometry/Polygon",
            "geometry/Polyline",
            "geometry/Extent",
            "config",
            "PopupTemplate",
            "widgets/BasemapGallery"









        ], function (Map, MapView, MapImageLayer, Graphic, GraphicsLayer, query, Query, Point, Basemap, TileInfo, Draw, PolygonDrawAction, Polygon, Polyline, Extent, config, PopupTemplate, BasemapGallery) {

           console.log(config)
            
            const mapServer = "https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer"
       

            //important variables///////////////////////////////////////////////////////////////////////////////
            const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';
            const EXCEL_EXTENSION = '.xlsx';
            const extentExtractor = function(extentt){
                const options = {
                    speedFactor: 0.1, // animation is 10 times slower than default
                    easing: "out-quint" // easing function to slow down when reaching the target
                };





                view.goTo(extentt, { duration: 2000 });


             
                

            }
           var SELECTEDDIVISIONPOLYGON = new Polygon
           var SELECTEDCIRCLEPOLYGON = new Polygon
            console.log(SELECTEDCIRCLEPOLYGON,"hello")
            var saverfunc//latter be used
             function combineExtentExtractor(extents) {
               
                
                var combinedExtent = null 
                extents.forEach(function(item, index){
                    if(!combinedExtent){
                        combinedExtent = item.clone()
                        
                    }else{
                        combinedExtent.xmin = Math.min(item.xmin, combinedExtent.xmin)
                        combinedExtent.ymin = Math.min(item.ymin, combinedExtent.ymin)
                        combinedExtent.xmax = Math.max(item.xmax, combinedExtent.xmax)
                        combinedExtent.ymax = Math.max(item.ymax, combinedExtent.ymax)
                    }
                   
                })
             
              
                extentExtractor(combinedExtent)
               

                

            }
            function combineExtentExtractorForPoint (extents){
                //[[latitude,longitude]]
                var combineedExtent = null;
                extents.forEach(function(item,index){

                    if(!combineedExtent){
                        combineedExtent = new Extent
                        combineedExtent.xmin = item.longitude
                        combineedExtent.ymin = item.latitude
                        combineedExtent.xmax = item.longitude
                        combineedExtent.ymax = item.latitude
                    }
                    else{
                        combineedExtent.xmin = Math.min(item.longitude, combineedExtent.xmin)
                        combineedExtent.ymin = Math.min(item.latitude, combineedExtent.ymin)
                        combineedExtent.xmax = Math.max(item.longitude, combineedExtent.xmax)
                        combineedExtent.ymax = Math.max(item.latitude, combineedExtent.ymax)
                    }
                    console.log(combineedExtent.xmin, item.longitude)
                })


                extentExtractor(combineedExtent)



            }
            function isCursorActive(textbox) {
                return textbox.selectionStart === textbox.selectionEnd;
            }
            function appendTextAtCursor(textbox, newText) {
                // Get the current cursor position
                var cursorPos = textbox.selectionStart;

                // Get the current textbox value
                var textboxValue = textbox.value;

                // Insert the new text at the cursor position
                var updatedText = textboxValue.substring(0, cursorPos) + newText + textboxValue.substring(cursorPos);

                // Update the textbox value with the modified text
                textbox.value = updatedText;
                textbox.focus()

                // Move the cursor to the end of the inserted text
                
            }
           
            
            ////////////////////////////////////////////////////////////////////////////////////////////////
           
            function downloadAsExcel(res, divID) {
                if (document.getElementById(`${divID}`).removeEventListener("click", saverfunc)) {

                }

                var data = new Array
                $(res.features).each(function (index, item) {

                    data.push(item.attributes)



                })

                const worksheet = XLSX.utils.json_to_sheet(data);
                const workbook = {
                    Sheets: {
                        'data': worksheet
                    },
                    SheetNames: ['data']
                };
                const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });

                const finalBlob = new Blob([excelBuffer], { type: EXCEL_TYPE });

                return (finalBlob)


            }
            function tableCleaner() {
                var tableHead = document.getElementById("headerRow")
                var tableBody = document.querySelector("#tableBody")

                while (tableHead.firstChild) {
                    tableHead.removeChild(tableHead.firstChild);
                }
                while (tableBody.firstChild) {
                    tableBody.removeChild(tableBody.firstChild);
                }



            }
            function tableconstructor(res,layerID,clearBtnId){
                tableCleaner()
                var data = new Array
               

                $(res.features).each(function (index, item) {

                    data.push(item.attributes)



                })
                
                
                res.fields.forEach(function(item,index){
                    $('#headerRow').append('<th scope="col">' + item.name + '</th>')

                    

                })
                
                

                data.forEach(function (item,index) {
                    var row = document.createElement("tr");

                    // Create cells and fill them with data
                    for (const [key, value] of Object.entries(item)) {
                        var cell = document.createElement("td");
                        cell.textContent = value;
                        if (key === "OBJECTID"){
                            cell.id = value
                            cell.className = 'tableRowElementViewer';
                            cell.addEventListener("click",function(event){
                                //console.log(event)
                                const queryURL = mapServer + `/${layerID}`

                                var queryObject = new Query();
                                queryObject.returnGeometry = true
                                queryObject.where = `OBJECTID = ${event.srcElement.id}`

                                query.executeQueryJSON(queryURL, queryObject).then(function (results) {
                                    console.log(results)
                                    if (results.geometryType === "point"){
                                    
                                    zoomAtPoint(results.features[0].geometry.latitude, results.features[0].geometry.longitude, 1000, 30)
                                        drawOneDWhileSavingpre(results.features[0].geometry.longitude, results.features[0].geometry.latitude, clearBtnId)
                                    }
                                    else if (results.geometryType === "polyline") {
                                        extentExtractor(results.features[0].geometry.extent)
                                        drawPolyLineWhileSavingPre(results.features[0].geometry.paths, clearBtnId)
                                        
                                    }else if (results.geometryType === "polygon") {
                                        extentExtractor(results.features[0].geometry.extent)
                                        drawPolygonWhileSavingPre(results.features[0].geometry.rings, clearBtnId)
                                        
                                    }
                                }).catch(function (error) {

                                   alert( error.name + "-" + error.message)


                                })
                                
                                
                            })
                            
                        }
                        
                        row.appendChild(cell);

                        



                    }
                    
                    tableBody.appendChild(row);

                });
                if ($("#main").removeClass("hide_table")){
                    
                }
                console.log()
                var cleanerFunction = function(){
                    tableCleaner()
                    document.getElementById(`${clearBtnId}`).removeEventListener("click", cleanerFunction)

                }
                document.getElementById(`${clearBtnId}`).addEventListener("click", cleanerFunction)


            }
           
            var layersFiels = new Array()

            layersFiels[14] = ["OBJECTID", "SAP_CODE", "OWNER", "OWNERSHIP", "NAME", "LANDMARK", "ADDRESS", "WORKREQUESTID", "DESIGNID", "WORKLOCATIONID", "SAPFUNCTIONALLOCATION", "GROUP_ID", "COMMENTS"
            ]//ehv

            layersFiels[15] = ["OBJECTID", "SERIALNUMBER", "SUBTYPECD", "MATERIAL", "OWNER", "HEIGHT", "FOUNDATIONTYPE", "ASSEMBLYTYPE", "CROSSSECTION", "POLENUMBER", "EQUIPMENTCODE", "DESIGNID"
            ]//souport structure

            layersFiels[34] = ["OBJECTID", "SERIALNUMBER", "DESIGNID", "WORKLOCATIONID"]//spanguy
            layersFiels[10] = ["OBJECTID", "FDRMGRNONTRACEABLE", "PHASEDESIGNATION", "FMOPERATINGVOLTAGE", "NUMBERCONDUCTORSPERPHASE", "NEUTRALMATERIAL"
                , "CABLETYPE", "CABLECONDUCTORMATERIAL", "NUMBEROFCORES", "CABLESIZE", "NOMINALVOLTAGE", "DESIGNID", "SAPEQUIPMENTID", "EQUIPMENTTYPE", "SOURCE_SS", "DESTINATION_SS", "SOURCE_SWITCH_ID", "DESTINATION_SWITCH_ID", "FEEDERNAME", "COMMENTS"
            ]//ht cable
            layersFiels[11] = ["OBJECTID", "SUBTYPECD", "FDRMGRNONTRACEABLE", "PHASEDESIGNATION", "FMOPERATINGVOLTAGE", "OPERATINGVOLTAGE"
                , "NUMBERCONDUCTORSPERPHASE", "NEUTRALMATERIAL", "CABLETYPE", "CABLECONDUCTORMATERIAL", "NUMBEROFCORES", "CABLESIZE", "NOMINALVOLTAGE", "WORKLOCATIONID", "EQUIPMENTTYPE", "SOURCE_ID"
                , "DESTINATION_ID", "FEEDERNAME", "WORKREQUESTID", "FSSCODE"
                , "COMMENTS"
            ]//lt cable
            layersFiels[2] = [
                "OBJECTID"
            , "SUBTYPECD"
            , "VOLTAGERATIO"
            , "STATIONFACILITYID_FK"
            , "PHASEDESIGNATION"
                , "NOMINALVOLTAGE"
                , "SERIALNUMBER"
                , "COMMENTS"
                , "LABELTEXT"
                , "ELECTRICSTATIONNAME"
                , "LOCATION"
                , "TYPEOFCOOLING"
                , "VECTORGROUP"
                , "INSULATIONMEDIUM"
                , "KVARATING"
                , "MAKE"
                , "WORKREQUESTID"
                , "DESIGNID"
                , "WORKLOCATIONID"
                , "EQUIPMENTCODE"
                , "EQUIPMENTTYPE"
                , "SWITCH_ID"
                , "SAPEQUIPMENTID"
                , "METERID"





            ]//dt
            layersFiels[6] = ["OBJECTID", "SUBTYPECD", "STATIONFACILITYID_FK"
                , "FEEDERID"
                , "FMOPERATINGVOLTAGE"
                , "PHASEDESIGNATION"
                , "NOMINALVOLTAGE"
                , "COMMENTS"
                , "MAKE"
                , "DESIGNID"
                , "WORKLOCATIONID"
                , "EQUIPMENTCODE"
                , "EQUIPMENTTYPE"
                , "SAPEQUIPMENTID"
                , "SWITCH_ID"
                , "ELECTRICSTATIONNAME"


            ]//switch
            layersFiels[8] = ["OBJECTID", "SUBTYPECD"
                , "STATIONFACILITYID_FK"
                , "PHASEDESIGNATION"
                , "NOMINALVOLTAGE"
                , "COMMENTS"
                , "MAKE"
                , "SUBTYPECD"
                , "FMOPERATINGVOLTAGE"
                , "DESIGNID"
                , "WORKLOCATIONID"
                , "EQUIPMENTCODE"
                , "EQUIPMENTTYPE"
                , "SAPEQUIPMENTID"
                , "SWITCH_ID"
                , "ELECTRICSTATIONNAME"




            ]//circuit Breaker
            layersFiels[17] = ["OBJECTID", "SUBTYPECD"
                , "FACILITYID"
                , "SAP_CODE"
                , "NAME"
                , "OWNERSHIP"
                , "LANDMARK"
                , "ZONE_CLUSTER"
                , "ACCESSCONTROL"
                , "KEYNUMBER"
                , "LAYOUTTYPE"
                , "WORKREQUESTID"
                , "FACILITYCODE"
                , "ADDRESS"
                , "SAPFUNCTIONALLOCATION"


            ]//substation
            layersFiels[13] = ["OBJECTID", "SUBTYPECD"

                , "FDRMGRNONTRACEABLE"
                , "PHASEDESIGNATION"
                , "FMOPERATINGVOLTAGE"
                , "STATIONFACILITYID_FK"
                , "NOMINALVOLTAGE"
                , "DESIGNID"
                , "WORKLOCATIONID"
                , "EQUIPMENTCODE"

            ]//busbar
            layersFiels[12] = ["OBJECTID", "SUBTYPECD"
                , "COMMENTS"
                , "FEEDERID"
                , "PHASEDESIGNATION"
                , "FMOPERATINGVOLTAGE"
                , "NUMBERCONDUCTORSPERPHASE"
                , "NEUTRALMATERIAL"
                , "NOMINALVOLTAGE"
                , "CONDUCTORMATERIAL"
                , "WORKLOCATIONID"
                , "CONDUCTORTYPE"
                , "SOURCE_ID"
                , "DESTINATION_ID"
                , "FEEDERNAME"



            ]//ohconductor
            layersFiels[18] = ["OBJECTID", "SUBTYPECD"
                , "OWNER"
                , "STATIONFACILITYID_FK"
                , "NOMINALVOLTAGE"
                , "MAKE"
                , "WORKREQUESTID"
                , "WORKLOCATIONID"
                , "EQUIPMENTCODE"
                , "SAPEQUIPMENTID"

            ]//rmu
            layersFiels[9] = ["OBJECTID", "SCHEMEID"
                , "SUBTYPECD"
                , "FEEDERID"
                , "PHASEDESIGNATION"
                , "FMOPERATINGVOLTAGE"
                , "NOMINALVOLTAGE"
                , "CABLETYPE1"
                , "CABLETYPE2"
                , "CABLESIZE1"
                , "CABLESIZE2"
                , "JOINTERNAME"
                , "NUMBEROFCORES1"
                , "NUMBEROFCORES2"
                , "WORKLOCATIONID"

            ]//joint
            layersFiels[16] = ["OBJECTID", "WORKLOCATIONID"
                , "FACILITYCODE"
                , "EQUIPMENTTYPE"
                , "PILLARNUMBER"




            ]//pillar


            layersFiels[4] = ["OBJECTID", "SUBTYPECD"
                , "FEEDERID"
                , "COMMENTS"
                , "CONSUMERNAME"
                , "ADDRESS"
                , "NOMINALVOLTAGE"
                , "OPERATINGSTATUS"
                , "PHASEDESIGNATION"
                , "WORKLOCATIONID"
                , "EXTERNALSCADAID"
                , "CONTRACTACNO"
                , "SUBSTATIONNAME"
                , "SWITCHID"
            ] // ht dilivery



            var negativeLayerList = new Array
            negativeLayerList = [0]
            



















            // Create a map
            var basemap = new Basemap({
                baseLayers: [
                    new MapImageLayer({
                        url:mapServer,
                        title: "Basemap"
                    })
                ],
                title: "basemap",
                id: "basemap"
            });

            var map = new Map({
                basemap: basemap
            });

           

            var view = new MapView({
                container: "viewData",
                map: map,
                constraints: {
                    lods: TileInfo.create().lods
                },
                 extent: {
                    xmin: 77.10338793025001,
                    ymin: 28.686209602678986,
                    xmax: 77.34490322234178,
                    ymax: 28.753548349143983,
                     spatialReference: 4326
                 }

                //center: [77.20858052646761, 28.645572965314187],
                //zoom: 11
            });


            

            
           
            


         
            const graphicsLayer = new GraphicsLayer();
            map.add(graphicsLayer);


            
            var eraseGraph = function(){


                graphicsLayer.remove(polygonGraphicT0);

                   pointgraphic = new Graphic;
                    console.log("removed");

              
           }
            var toggleTable = function(){
                if ($("#main").hasClass("hide_table")) {
                    $("#main").removeClass("hide_table")

                } else if (!($("#main").hasClass("hide_table"))) {
                    $("#main").addClass("hide_table")

                }
                
            }
            var togleControls = function(){
                if ($("#sideNavbtn , #circleSelect , #divisionSelect,#iconHolder,#loginNav,#circleAndDivisionGraphicClear").hasClass("invisible")) {
                    $("#sideNavbtn , #circleSelect , #divisionSelect,#iconHolder,#loginNav,#circleAndDivisionGraphicClear").removeClass("invisible")

                } else if (!($("#sideNavbtn , #circleSelect , #divisionSelect,#iconHolder,#loginNav,#circleAndDivisionGraphicClear")).hasClass("invisible")) {
                    $("#sideNavbtn , #circleSelect , #divisionSelect,#iconHolder,#loginNav,#circleAndDivisionGraphicClear").addClass("invisible")
                }

            }
            


            var polygonGraphicT0 = new Graphic()//for spatialQuery polygon
            const oneDGraphic = new Graphic()//for spatial query point
            var polygonsT1 = new Graphic()//for circles and divisions
           
            var polylineGraphic = new Graphic()//for spatialQuery polyline



            const drawPolygonWithClearPre = function (arr) {




                const polygon = {
                    type: "polygon",
                    rings: arr
                };


                const simpleFillSymbol = {
                    type: "simple-fill",
                    color: [251, 9, 1, 0.55],  // Orange, opacity 80%
                    outline: {
                        color: [255, 255, 255],
                        width: 1
                    }
                };

                const popupTemplateT = {
                    title: "{Name}",
                    content: "{Description}"
                }

                const pointGraphicT = {
                    Name: "Graphic",
                    Description: "I am a polygon"
                }



                polygonsT1.geometry = polygon;
                polygonsT1.symbol = simpleFillSymbol;
                polygonsT1.attributes = pointGraphicT
                polygonsT1.popupTemplate = popupTemplateT


                graphicsLayer.add(polygonsT1);


            }
            ///////////////
            const drawPolygonWithClearPreForSpatialQuery = function(arr,clearBtnId,Title){
                
                
                
                const polygon = {
                    type: "polygon",
                    rings: arr
                };


                const simpleFillSymbol = {
                    type: "simple-fill",
                    color: [0,0, 0, 0.17],  // Orange, opacity 80%
                    outline: {
                        color: [50, 205, 50],
                        width: 1
                    }
                };

                const popupTemplateT = {
                    title: "{OBJECTID}",
                   
                }

                const pointGraphicT = {
                    OBJECTID: Title
                   
                }



                polygonGraphicT0.geometry = polygon;
                polygonGraphicT0.symbol = simpleFillSymbol;
                polygonGraphicT0.attributes = pointGraphicT
                polygonGraphicT0.popupTemplate = popupTemplateT


                graphicsLayer.add(polygonGraphicT0);
                var removerFunction = function () {
                    graphicsLayer.remove(polygonGraphicT0);
                    document.getElementById(`${clearBtnId}`).removeEventListener("click", removerFunction)

                };
                document.getElementById(`${clearBtnId}`).addEventListener("click", removerFunction)


            }
            const drawAPolylineWithClearPre = function (vertices, clearBtnId,Title) {

                var polyline = {
                    type: "polyline", // autocasts as Polyline
                    paths: vertices,
                    spatialReference: view.spatialReference
                };
                var symbolA = {
                    type: "simple-line", // autocasts as SimpleLineSymbol
                    color: [4, 90, 141],
                    width: 3,
                    cap: "round",
                    join: "round"
                }
                const popupTemplateT = {
                    title: "{OBJECTID}",

                }

                const popupTemplateAttribute = {
                    OBJECTID: Title

                }

                polylineGraphic.geometry = polyline;
                polylineGraphic.symbol = symbolA;
                polylineGraphic.attributes = popupTemplateAttribute
                polylineGraphic.popupTemplate = popupTemplateT


                graphicsLayer.add(polylineGraphic);

                var removerFunction = function () {
                    graphicsLayer.remove(polylineGraphic);
                    document.getElementById(`${clearBtnId}`).removeEventListener("click", removerFunction)

                };
                document.getElementById(`${clearBtnId}`).addEventListener("click", removerFunction)



            }
            var oneDpointDraw = function (clearBtnId,Title, event) {
                const layerID = $("#spatialQueryDropdown").val()
                console.log(Title)
                if (layerID) {
                    const clickedPoint = new Point({
                        x: event.mapPoint.longitude,
                        y: event.mapPoint.latitude,
                        spatialReference: { wkid: 4326 },
                    })



                    oneDGraphic.geometry = clickedPoint

                    var symbolCircle = {
                        type: "simple-marker",
                        style: "circle",
                        color: "red",
                        size: "10px",
                    }
                  

                    

                    oneDGraphic.symbol = symbolCircle

                   



                    graphicsLayer.add(oneDGraphic);
                    var removerFunction = function () {
                        graphicsLayer.remove(oneDGraphic);
                        document.getElementById(`${clearBtnId}`).removeEventListener("click", removerFunction)

                    };
                    document.getElementById(`${clearBtnId}`).addEventListener("click", removerFunction)




                    // Log the clicked coordinates





                    const queryURL = mapServer + `/${layerID}`

                    var queryObject = new Query();

                    queryObject.geometry = clickedPoint

                    if (layersFiels[layerID]) {
                        queryObject.outFields = layersFiels[layerID]
                    } else {
                        queryObject.outFields = ["*"]
                    }

                    queryObject.returnGeometry = true





                    var queryObjectForcheckCompany = new Query();

                    queryObjectForcheckCompany.geometry = clickedPoint

                    queryObjectForcheckCompany.outFields = ["COMPANY"]


                    query.executeQueryJSON(`${mapServer}/31`, queryObjectForcheckCompany).then(function (results) {


                        if (results.features.length === 0) {

                            $("#featureCount").text("OUT OF BSES JURISDICTION")
                        }

                        else if (results.features[0].attributes.COMPANY === "BYPL") {
                            query.executeQueryJSON(queryURL, queryObject).then(function (res) {
                                tableconstructor(res, layerID, clearBtnId)
                                const excelBlob = downloadAsExcel(res,"excelSpatialQuery")
                                saverfunc = function () {
                                    saveAs(excelBlob, "spatialQueryResult" + EXCEL_EXTENSION)

                                }
                                document.getElementById("excelSpatialQuery").addEventListener("click", saverfunc)
                               

                                $("#featureCount").text(" ")
                                $("#featureCountWarning").text(" ")
                                $("#featureCount").text(`${res.features.length} (data for point)`)
                                if (res.features.length===1000){
                                    $("#featureCountWarning").text("WARNING : THERE MAY BE MORE THAN 1000 FEATURES PRESENT")
                                }

                                $("#excelSpatialQuery").removeClass("invisible")

                            }).catch(function (error) {

                                document.getElementById("featureCount").textContent = error.name + "-" + error.message


                            })
                        }
                        else {
                            $("#featureCount").text(" ")
                            $("#featureCount").text("NOT UNDER BYPL")

                        }



                    }).catch(function(error){
                        document.getElementById("featureCount").textContent = error.name + "-" + error.message


                    })











                } else if (!layerID) {
                    alert("please choose layer")
                }




            }
        ////////////////////

            var draw = new Draw({
                view: view
            });
            function enableCreatePolygon(draw, view, clearBtnId) {
                const layerID = $("#spatialQueryDropdown").val()
                if (layerID) {
                var action = draw.create("polygon");

                // PolygonDrawAction.vertex-add
                // Fires when user clicks, or presses the "F" key.
                // Can also be triggered when the "R" key is pressed to redo.
                action.on("vertex-add", function (evt) {
                        drawPolygonWithClearPreForSpatialQuery(evt.vertices, clearBtnId,"Spatial Query Polygon")
                });

                // PolygonDrawAction.vertex-remove
                // Fires when the "Z" key is pressed to undo the last added vertex
                action.on("vertex-remove", function (evt) {
                        drawPolygonWithClearPreForSpatialQuery(evt.vertices, clearBtnId, "Spatial Query Polygon");
                });

                // Fires when the pointer moves over the view
                action.on("cursor-update", function (evt) {
                        drawPolygonWithClearPreForSpatialQuery(evt.vertices, clearBtnId, "Spatial Query Polygon");
                });

                // Add a graphic representing the completed polygon
                // when user double-clicks on the view or presses the "Enter" key
                action.on("draw-complete", function (evt) {


                        drawPolygonWithClearPreForSpatialQuery(evt.vertices, clearBtnId, "Spatial Query Polygon");
                    console.log(evt.vertices)
                    var shape = new Polygon({
                        type:"polygon",

                        rings: evt.vertices


                    }
                    
                    
                    
                    )
                    

                    const queryURL = mapServer + `/${layerID}`

                    var queryObject = new Query();
                    

                    queryObject.geometry = shape
                        if (layersFiels[layerID]){
                        queryObject.outFields = layersFiels[layerID]
                        }else{
                            queryObject.outFields = ["*"]
                        }

                    queryObject.returnGeometry = true
                    console.log(queryObject)





                    var queryObjectForcheckCompany = new Query();

                    queryObjectForcheckCompany.geometry = shape

                    queryObjectForcheckCompany.outFields = ["COMPANY"]


                    query.executeQueryJSON("https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/31", queryObjectForcheckCompany).then(function (results) {


                        if (results.features.length === 0) {

                            $("#featureCount").text("OUT OF BSES JURISDICTION")
                        }

                        else if (results.features[0].attributes.COMPANY === "BYPL") {
                            $("#featureCount").text("Running.....")
                            query.executeQueryJSON(queryURL, queryObject).then(function (res) {
                                    const excelBlob = downloadAsExcel(res, "excelSpatialQuery")
                                    tableconstructor(res, layerID, clearBtnId)
                                    saverfunc = function () {
                                        saveAs(excelBlob, "spatialQueryResult" + EXCEL_EXTENSION)

                                    }
                                    document.getElementById("excelSpatialQuery").addEventListener("click", saverfunc)
                                    
                                    

                                $("#featureCount").text(" ")
                                    $("#featureCountWarning").text(" ")
                                $("#featureCount").text(`${res.features.length} (data for ${shape.type})`)
                                    if (res.features.length === 1000) {
                                        $("#featureCountWarning").text("WARNING : THERE MAY BE MORE THAN 1000 FEATURES PRESENT")
                                    }
                                    $("#excelSpatialQuery").removeClass("invisible")

                                    



                            }).catch(function (error) {

                                    document.getElementById("featureCount").textContent = error.name + "-" + error.message


                            })
                            console.log(results.features[0].attributes.COMPANY)
                        }
                        else {
                            $("#featureCount").text(" ")
                            $("#featureCount").text("NOT UNDER BYPL")

                        }
                            $("#Polygon").removeClass("activee")



                    }).catch(function(error){
                        document.getElementById("featureCount").textContent = error.name + "-" + error.message


                    })





                   




                















                });
                }
                else {
                    alert("please select Layer")
                    $("#Polygon").removeClass("activee")
                }

            }
            function enableCreatePolyline(draw, view, clearBtnId) {
                const layerID = $("#spatialQueryDropdown").val()
                
                if (layerID){
                var action = draw.create("polyline");

                // listen to PolylineDrawAction.vertex-add
                // Fires when the user clicks, or presses the "F" key
                // Can also fire when the "R" key is pressed to redo.
                action.on("vertex-add", function (evt) {
                        drawAPolylineWithClearPre(evt.vertices, clearBtnId,"Spatial Query Polyline");
                });

                // listen to PolylineDrawAction.vertex-remove
                // Fires when the "Z" key is pressed to undo the
                // last added vertex
                action.on("vertex-remove", function (evt) {
                        drawAPolylineWithClearPre(evt.vertices, clearBtnId, "Spatial Query Polyline");
                });

                // listen to PolylineDrawAction.cursor-update
                // fires when the pointer moves over the view
                action.on("cursor-update", function (evt) {
                        drawAPolylineWithClearPre(evt.vertices, clearBtnId, "Spatial Query Polyline");
                });

                // listen to PolylineDrawAction.draw-complete
                // event to create a graphic when user double-clicks
                // on the view or presses the "Enter" key
                action.on("draw-complete", function (evt) {

                        drawAPolylineWithClearPre(evt.vertices, clearBtnId, "Spatial Query Polyline");




                    var shape = new Polyline({
                        type: "polyline",

                        paths: evt.vertices


                    }




                    )


                    const queryURL = mapServer + `/${layerID}`

                    var queryObject = new Query();

                    queryObject.geometry = shape

                        if (layersFiels[layerID]) {
                            queryObject.outFields = layersFiels[layerID]
                        } else {
                            queryObject.outFields = ["*"]
                        }

                    queryObject.returnGeometry = true
                    console.log(queryObject)





                    var queryObjectForcheckCompany = new Query();

                    queryObjectForcheckCompany.geometry = shape

                    queryObjectForcheckCompany.outFields = ["COMPANY"]


                    query.executeQueryJSON("https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/31", queryObjectForcheckCompany).then(function (results) {
                        console.log(results)
                         
                        if (results.features.length === 0) {

                            $("#featureCount").text("OUT OF BSES JURISDICTION")
                        }

                        else if (results.features[0].attributes.COMPANY === "BYPL") {
                            $("#featureCount").text("Running.....")
                            query.executeQueryJSON(queryURL, queryObject).then(function (res) {
                                    tableconstructor(res, layerID, clearBtnId)
                                    const excelBlob = downloadAsExcel(res, "excelSpatialQuery")
                                    saverfunc = function () {
                                        saveAs(excelBlob, "spatialQueryResult" + EXCEL_EXTENSION)

                                    }
                                    document.getElementById("excelSpatialQuery").addEventListener("click", saverfunc)

                                $("#featureCount").text(" ")
                                    $("#featureCountWarning").text(" ")
                                    $("#featureCount").text(`${res.features.length} data for (${shape.type})`)
                                    if (res.features.length === 1000) {
                                        $("#featureCountWarning").text("WARNING : THERE MAY BE MORE THAN 1000 FEATURES PRESENT")
                                    }
                                    $("#excelSpatialQuery").removeClass("invisible")

                                    $("#excelSpatialQuery").removeClass("invisible")


                            }).catch(function (error) {

                                    document.getElementById("featureCount").textContent = error.name + "-" + error.message


                           })
                            console.log(results.features[0].attributes.COMPANY)
                        }
                        else {
                            $("#featureCount").text(" ")
                            $("#featureCount").text("NOT UNDER BYPL")

                        }
                        $("#line").removeClass("activee")



                    }).catch(function (error) {
                           document.getElementById("featureCount").textContent = error.name + "-" + error.message


                   })



















                });
                }
                else{
                    alert("please select layer")
                    $("#line").removeClass("activee")
                }
            }

            

            $(document).ready(function () {




                $.ajax({
                    url: "https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/layers?dynamicLayers=1%3D1&f=pjson",
                    method: "GET",
                    
                    
                    success: function (response) {
                        ISPAGELOADFIRST = false
                        $("#spatialQueryDropdown , #attributeQueryDropdown").find("option").remove()
                        $('#spatialQueryDropdown, #attributeQueryDropdown').append('<option selected disabled values = "-1"> ---select Layer---</option>')
                        const rs = JSON.parse(response)
                        
                        $(rs.layers).each(function(index , item){
                            
                            var layerID = item.id;
                            if (!negativeLayerList.includes(layerID)){
                               var layerName = item.name
                                $('#spatialQueryDropdown, #attributeQueryDropdown').append('<option value = "' + layerID + '">' + layerName + '</option>')
                            
                            }
                        })
                    },
                    error: function (xhr, status, error) {
                       alert("no internet connection")
                        var handler;
                        handler = function () {
                            location.reload()
                            window.removeEventListener('online', handler);

                        }
                        window.addEventListener('online',handler);

                    }
                })

                togleControls()
                


                

                var queryUrl = "https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/31"
                var queryObject = new Query();
                queryObject.where = "COMPANY= 'BYPL'";
                queryObject.outFields = ["*"];


                query.executeQueryJSON(queryUrl, queryObject).then(function (results) {
                    $("#circleSelect").find("option").remove()
                    $('#circleSelect').append('<option selected disabled values = "-1"> ---select Circle---</option>')
                    $(results.features).each(
                        function (index, item) {
                            console.log(item)
                           const circleName =item.attributes.CIRCLE
                            const circleID = item.attributes.OBJECTID

                            $('#circleSelect').append('<option value = "' + circleID + '">' + circleName + '</option>')
                            


                        }
                    )
                }).catch(function (error) {
                    var alertstr = error.name + "-" + error.message;
                    alert(alertstr)


                })
                
            });
           
            var zoomAtPoint = function(lat,longi,durat,zoomParam){
                var zoompt = new Point({
                    latitude: lat,
                    longitude: longi
                })
                var opts = {
                    duration: durat
                };
                view.goTo({
                    target: zoompt,
                    zoom: zoomParam
                }, opts);
            }
            var onChangeOfCircleDraw =  function(){
                var queryUrl = `${mapServer}/31`
                var queryObject = new Query();
                var objectID = $("#circleSelect").val()
                
                queryObject.where = `OBJECTID = ${objectID}`;
                queryObject.outFields = ["SHAPE"];
                queryObject.returnGeometry = true


                query.executeQueryJSON(queryUrl, queryObject).then(function (results) {
                    var lat = results.features[0].geometry.centroid.latitude
                    var lon = results.features[0].geometry.centroid.longitude


                    extentExtractor(results.features[0].geometry.extent)
                    


                        
                    
                    //console.log(results.features.geometry.rings)
                    var cordinates = results.features[0].geometry.rings;
                    SELECTEDCIRCLEPOLYGON.rings = cordinates
                    SELECTEDCIRCLEPOLYGON.type = "polygon"
                    
                    
                    drawPolygonWithClearPre(cordinates)


                }).catch(function (error) {
                    var alertstr = error.name + "-" + error.message;
                    alert(alertstr)


                })
                
            }
            var onChangeOfCircleBringDivision= function(){
                
                var selectedCircle = $("#circleSelect option:selected").text()
                var queryUrl = "https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/22"
                var queryObject = new Query();
                queryObject.where = `CIRCLE ='${selectedCircle}'`;
                queryObject.outFields = ["*"];
                queryObject.returnGeometry = true



                query.executeQueryJSON(queryUrl, queryObject).then(function (results) {
                    $("#divisionSelect").find("option").remove()
                    $('#divisionSelect').append('<option selected disabled values = "-1"> ---select division---</option>')

                    $(results.features).each(
                        function (index, item) {
                            
                            var divisionID = item.attributes.OBJECTID_1
                            var divisionName = item.attributes.DIVISION_N
                            
                            $('#divisionSelect').append('<option value = "' + divisionID + '">' + divisionName + '</option>')
                            
                            


                        }
                    )
                }).catch(function (error) {
                    var alertstr = error.name + "-" + error.message;
                    alert(alertstr)


                })

            }
            var downloadScreenshot = function (uri,name) {
                var link = document.createElement("a");
                link.download = name;
                link.href = uri;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                delete link;

            }

            var onChangeOfDivisionDraw=  function(){
                var queryUrl = "https://gisypl.bsesdelhi.com/server/rest/services/GIS/BYPLGISApp/MapServer/22"
                var queryObject = new Query();
                var objectID = $("#divisionSelect").val()

                queryObject.where = `OBJECTID_1 = ${objectID}`;
                queryObject.outFields = ["SHAPE"];
                queryObject.returnGeometry = true


                query.executeQueryJSON(queryUrl, queryObject).then(function (results) {
                    var lat = results.features[0].geometry.centroid.latitude
                    var lon = results.features[0].geometry.centroid.longitude


                    var animationDuration =2000
                    extentExtractor(results.features[0].geometry.extent)
                   
                   

                    var cordinates = results.features[0].geometry.rings;
                    SELECTEDDIVISIONPOLYGON.rings = cordinates
                    SELECTEDDIVISIONPOLYGON.type = "polygon"
                    drawPolygonWithClearPre(cordinates)


                }).catch(function (error) {
                    var alertstr = error.name + "-" + error.message;
                    alert(alertstr)


                })
            }
            

            
            



           
            

            var eventListnerForPointOnView;
            $("#point").click(function(){

                $("#featureCount").text(" ")
                $("#featureCountWarning").text(" ")

                $("#line").removeClass("activee")
                $("#Polygon").removeClass("activee")
               
                
                $("#excelSpatialQuery").addClass("invisible")
                if ($("#point").hasClass("activee")){


                    eventListnerForPointOnView.remove()
                  
                    $("#point").removeClass("activee")
                   



                } else if (!($("#point").hasClass("activee"))) {
                    
                    
                    console.log(view)
                    var boundEventHandler = oneDpointDraw.bind( null,"clearSpatialQuery","Spatial Query Point");
                    eventListnerForPointOnView = view.on("click", boundEventHandler)

                    draw.create("polygon").on("draw-complete")
                    
                    $("#point").addClass("activee")
                    

                }


            })
            $("#Polygon").click(function(){
                $("#featureCount").text(" ")
                $("#featureCountWarning").text(" ")
                $("#line").removeClass("activee")
                $("#point").removeClass("activee")
               
                $("#excelSpatialQuery").addClass("invisible")
               
                if (!($("#Polygon").hasClass("activee"))){
                    
                    $("#Polygon").addClass("activee")
                    if (eventListnerForPointOnView){
                    eventListnerForPointOnView.remove()
                    }



                    enableCreatePolygon(draw, view, "clearSpatialQuery")
                    
                }
                else{
                    $("#Polygon").removeClass("activee")
                    draw.create("polygon").on("draw-complete", function (evt) {

                        drawPolygonWithClearPreForSpatialQuery(evt.vertices, "clearSpatialQuery", "Spatial Query Polygon")
                    
                    
                    })
                    

                }


            })
            $("#line").click(function(){


                $("#featureCount").text(" ")
                $("#featureCountWarning").text(" ")
                $("#Polygon").removeClass("activee")
                $("#point").removeClass("activee")
                
                $("#excelSpatialQuery").addClass("invisible")

                if (!($("#line").hasClass("activee"))) {

                    $("#line").addClass("activee")
                    if (eventListnerForPointOnView) {
                        eventListnerForPointOnView.remove()
                    }

                    $("#polygon").removeClass("activee")
                    $("#point").removeClass("activee")

                    enableCreatePolyline(draw, view, "clearSpatialQuery")

                }
                else {
                    $("#line").removeClass("activee")
                    draw.create("polyline").on("draw-complete", function (evt) {

                        drawAPolylineWithClearPre(evt.vertices, "clearSpatialQuery", "Spatial Query Polyline")


                    })


                }







            }



            )
            $("#clearSpatialQuery").click(function(){

                

               
               
                $("#featureCount").text(" ")
                $("#featureCountWarning").text(" ")

                document.getElementById("excelSpatialQuery").removeEventListener("click", saverfunc)
                $("#excelSpatialQuery").addClass("invisible")
               
                    


            }
            )



            $("#circleSelect").change(function(){

                onChangeOfCircleDraw()
                onChangeOfCircleBringDivision()

            })
            $("#divisionSelect").change(function(){

                onChangeOfDivisionDraw()
            })
            


            $("#mapHome").click(function(){

                zoomAtPoint(28.645572965314187, 77.20858052646761, 2000, 11)

            })
            $("#erraseAnot").click(function(){
                graphicsLayer.removeAll();
                tableCleaner()

            }
                
            )
            $("#tgTable").click(function(){
                
                toggleTable()
                
                
            })
            $("#screenShotBtn").click(function(){
                view.takeScreenshot().then(function (screenshotData) {
                    console.log(screenshotData.dataUrl);

                    downloadScreenshot(screenshotData.dataUrl, "spartial Query.png");



                });
                

            })
            ///////////////////////////////////////////////////////////////////////////ATTRIBUTE QUERY/////////////////////////////////
            var queryTextField = document.getElementById("AttributeQueryTextField")
            const resetAttributeParameters = function(){
                $("#attributeQueryFieledDropdown").find("option").remove()
                $('#attributeQueryFieledDropdown').append('<option selected disabled values = "-1"> ---select Field---</option>')

                $("#attributeQueryValues").find("option").remove()
                $('#attributeQueryValues').append('<option selected disabled values = "-1"> ---select Value---</option>')
                $("#excelAttributeQuery").addClass("invisible")

                document.getElementById("AttributeQueryTextField").value = null
                var dropdown = document.getElementById("attributeQueryDropdown");
                dropdown.selectedIndex = 0
                document.getElementById("featureCountAttributeQuery").textContent = null
                document.getElementById("featureCountWarningAttributeQuery").textContent = null
                

            }
            const drawPolygonWhileSavingPre = function (arr, clearBtnId, Title) {
                var polygonsT2 = new Graphic()//for circles and divisions

                const polygon = {
                    type: "polygon",
                    rings: arr
                };


                const simpleFillSymbol = {
                    type: "simple-fill",
                    color: [85, 136, 254, 0.8],  // Orange, opacity 80%
                    outline: {
                        color: [85, 136, 254],
                        width: 1
                    }
                };

                const popupTemplateT = {
                    title: "{OBJECTID}"
                    
                }

                const pointGraphicT = {
                    OBJECTID: Title
                   
                }



                polygonsT2.geometry = polygon;
                polygonsT2.symbol = simpleFillSymbol;
                polygonsT2.attributes = pointGraphicT
                polygonsT2.popupTemplate = popupTemplateT


                graphicsLayer.add(polygonsT2);

                
                var clearFunction = function(){
                    graphicsLayer.remove(polygonsT2)
                   
                    document.getElementById(`${clearBtnId}`).removeEventListener("click",clearFunction)

                }
                document.getElementById(`${clearBtnId}`).addEventListener("click",clearFunction)

            }
            const drawPolyLineWhileSavingPre = function (vertices, clearBtnId, Title) {
                var polylineT0 = new Graphic()//for circles and divisions
                var polyline = {
                    type: "polyline", // autocasts as Polyline
                    paths: vertices,
                    spatialReference: view.spatialReference
                };
                var symbolA = {
                    type: "simple-line", // autocasts as SimpleLineSymbol
                    color: [218, 33, 1],
                    width: 1,
                    cap: "round",
                    join: "round"
                }
                const popupTemplateT = {
                    title: "{OBJECTID}",

                }

                const PolylineGraphicT = {
                    OBJECTID: Title

                }
                polylineT0.attributes = PolylineGraphicT
                polylineT0.popupTemplate = popupTemplateT
                polylineT0.geometry = polyline;
                polylineT0.symbol = symbolA;
              


                graphicsLayer.add(polylineT0);

                var clearFunction = function () {
                    graphicsLayer.remove(polylineT0)
                    resetAttributeParameters()
                    document.getElementById(`${clearBtnId}`).removeEventListener("click",clearFunction)

                }
                document.getElementById(`${clearBtnId}`).addEventListener("click",clearFunction)


            }
            const drawOneDWhileSavingpre = function (longi, lat, clearBtnId,Title) {

                var oneDGraphicForAttributeQuery = new Graphic()
                const point = new Point({
                    x: longi,
                    y: lat,
                    spatialReference: { wkid: 4326 },
                })





                var symbolCircle = {
                    type: "simple-marker",
                    style: "circle",
                    color: "red",
                    size: "10px",
                }
                const popupTemplateT = {
                    title: "{OBJECTID}",

                }

                const pointGraphicT = {
                    OBJECTID: Title

                }
                oneDGraphicForAttributeQuery.attributes = pointGraphicT
                oneDGraphicForAttributeQuery.popupTemplate = popupTemplateT
                oneDGraphicForAttributeQuery.geometry = point
                oneDGraphicForAttributeQuery.symbol = symbolCircle



                graphicsLayer.add(oneDGraphicForAttributeQuery);
                var clearFunction = function () {
                    graphicsLayer.remove(oneDGraphicForAttributeQuery)
                    resetAttributeParameters()
                    document.getElementById(`${clearBtnId}`).removeEventListener("click",clearFunction)

                }
                document.getElementById(`${clearBtnId}`).addEventListener("click",clearFunction)
            }

            var onchangeOfLayerBringFields = function () {
                $("#attributeQueryFieledDropdown").find("option").remove()
                $('#attributeQueryFieledDropdown').append('<option selected disabled values = "-1"> ---select Field---</option>')
                $("#attributeQueryValues").find("option").remove()
                $('#attributeQueryValues').append('<option selected disabled values = "-1"> ---select Value---</option>')
                document.getElementById("featureCountAttributeQuery").textContent = null
                document.getElementById("featureCountWarningAttributeQuery").textContent = null
                document.getElementById("AttributeQueryTextField").value = null
               
                
                var selectedLayer = $("#attributeQueryDropdown option:selected").val()
                const queryURL = mapServer + `/${selectedLayer}`
                var queryObject = new Query();
                queryObject.where = "1=1"
                if ((SELECTEDCIRCLEPOLYGON.extent) && !(SELECTEDDIVISIONPOLYGON.extent)) {
                    queryObject.geometry = SELECTEDCIRCLEPOLYGON
                }
                else if ((SELECTEDCIRCLEPOLYGON.extent) && (SELECTEDDIVISIONPOLYGON.extent)) {
                    queryObject.geometry = SELECTEDDIVISIONPOLYGON
                }
                if (layersFiels[selectedLayer]){
                    queryObject.outFields = layersFiels[selectedLayer]
                   
                }
                else if (!layersFiels[selectedLayer]) {
                    queryObject.outFields = ["*"]
                  
                }
               
                queryObject.returnGeometry = true



                query.executeQueryJSON(queryURL, queryObject).then(function (results) {
                   
                        results.fields.forEach(function(item , index){

                            
                        $('#attributeQueryFieledDropdown').append('<option value = "' + index + '">' + item.name + '</option>')

                        })
                }).catch(function (error) {
                    
                    document.getElementById("featureCountAttributeQuery").textContent = error.name + "-" + error.message


                })


            }

            var onChangeOfFieldUpdateValueDropDown = function(){
               


                var selectedLayer = $("#attributeQueryDropdown option:selected").val()
                var selectedField = $("#attributeQueryFieledDropdown option:selected").text()
                queryString = `${selectedField}`
                if (!queryTextField.value){
                queryTextField.value = queryString
                }
                else{
                    queryTextField.value = queryTextField.value.toString() + queryString
                }

                const queryURL = mapServer + `/${selectedLayer}`
                var queryObject = new Query();

                queryObject.where = "1=1"
                queryObject.outFields = [`${selectedField}`]

                if ((SELECTEDCIRCLEPOLYGON.extent) && !(SELECTEDDIVISIONPOLYGON.extent)) {
                    queryObject.geometry = SELECTEDCIRCLEPOLYGON
                }
                else if ((SELECTEDCIRCLEPOLYGON.extent) && (SELECTEDDIVISIONPOLYGON.extent)) {
                    queryObject.geometry = SELECTEDDIVISIONPOLYGON
                }
                queryObject.returnGeometry = true

                const uniqueFieldValue = new Set

                query.executeQueryJSON(queryURL, queryObject).then(function (results) {
                    results.features.forEach(function(item , index){
                        
                        Object.values(item.attributes).forEach(function(value){
                            var trimedStr = value;
                           
                            if (typeof (trimedStr) === "string") {
                                trimedStr = value.trim()
                                
                            }
                            uniqueFieldValue.add(trimedStr)
                            

                        })
                        

                    })
                    console.log(uniqueFieldValue)
                    $("#attributeQueryValues").find("option").remove()
                    $('#attributeQueryValues').append('<option selected disabled values = "-1"> ---select Circle---</option>')

                    uniqueFieldValue.forEach(function(item,index){

                        $('#attributeQueryValues').append('<option>' + item + '</option>')


                    })



                }).catch(function (error) {

                    document.getElementById("featureCountAttributeQuery").textContent = error.name + "-" + error.message


                })


            }
            var onChangeOfValueUpdateQueryString= function(){

                
                var selectedValue = $("#attributeQueryValues option:selected").text()
                var queryString;

                if (isNaN(selectedValue)){
                 queryString = queryTextField.value.toString() + `'${selectedValue}'`;
                }else{
                  queryString = queryTextField.value.toString() + selectedValue;
                }
                debugger

                queryTextField.value = queryString

                console.log(queryString)



            }
            var onApplyBringObjects = function(){
                var selectedLayer = $("#attributeQueryDropdown option:selected").val()
                var queryUrl = mapServer + `/${selectedLayer}`
                var whereString = document.getElementById("AttributeQueryTextField").value
                var queryObject = new Query();
                queryObject.where = whereString;
                debugger
                if ((SELECTEDCIRCLEPOLYGON.extent) && !(SELECTEDDIVISIONPOLYGON.extent)){
                queryObject.geometry = SELECTEDCIRCLEPOLYGON
                debugger
                }
                else if ((SELECTEDCIRCLEPOLYGON.extent) && (SELECTEDDIVISIONPOLYGON.extent)){
                    queryObject.geometry = SELECTEDDIVISIONPOLYGON
                    debugger
                }
                debugger
                if (layersFiels[selectedLayer]) {
                queryObject.outFields = layersFiels[selectedLayer]
                }else{
                    queryObject.outFields=["*"]
                }
                queryObject.returnGeometry = true
                document.getElementById("featureCountAttributeQuery").textContent = "Running..."

                query.executeQueryJSON(queryUrl, queryObject).then(function (results) {
                    console.log(results)
                   
                    var arrayOfExtent=new Array;
                  
                   results.features.forEach(function(item,index){
                        if (results.geometryType !== "point"){
                        arrayOfExtent.push(item.geometry.extent)
                        }
                        else{
                            var pointObj = new Point

                            pointObj.latitude = item.geometry.latitude
                            pointObj.longitude = item.geometry.longitude
                                
                            arrayOfExtent.push(pointObj)

                        }
                       var geoType = item.geometry.type
                       if(geoType === "polygon"){
                            drawPolygonWhileSavingPre(item.geometry.rings, "attributeQueryClear" ,"Attribute Query Polygon")
                       }
                        if (geoType === "polyline"){
                            drawPolyLineWhileSavingPre(item.geometry.paths, "attributeQueryClear","Attribute Query Polyline")
                        }

                        if(geoType === "point"){
                            drawOneDWhileSavingpre(item.geometry.longitude, item.geometry.latitude, "attributeQueryClear", "Attribute Query Polyline")
                        }
                    
                    
                    })
                    console.log(results)
                    if ((results.features.length === 1) && (results.geometryType === "polyline" || results.geometryType === "polygon")) {

                        extentExtractor(results.features[0].geometry.extent)
                    }
                    else if (results.features.length === 1) {
                        zoomAtPoint(results.features[0].geometry.latitude, results.features[0].geometry.longitude, 2000, 30)

                    }
                    else if ((results.features.length > 1) && (results.geometryType === "polyline" || results.geometryType === "polygon")){
                        combineExtentExtractor(arrayOfExtent)
                    }
                    else{
                        console.log(arrayOfExtent,"here")
                        combineExtentExtractorForPoint(arrayOfExtent)

                    }
                    document.getElementById("featureCountAttributeQuery").textContent = " "
                    document.getElementById("featureCountWarningAttributeQuery").textContent = " "

                    document.getElementById("featureCountAttributeQuery").textContent = results.features.length
                    if(results.features.length === 1000){
                    document.getElementById("featureCountWarningAttributeQuery").textContent = "WARNING : THERE CAN BE MORE THAN 1000 FEATURES PRESENT"
                    }

                    const excelBlob = downloadAsExcel(results, "excelAttributeQuery")
                    tableconstructor(results, selectedLayer, "attributeQueryClear")
                    saverfunc = function () {
                        saveAs(excelBlob, "attributeQueryResult" + EXCEL_EXTENSION)

                    }
                    document.getElementById("excelAttributeQuery").addEventListener("click", saverfunc)
                    $("#excelAttributeQuery").removeClass("invisible")
                }).catch(function (error) {

                   document.getElementById("featureCountAttributeQuery").textContent = error.name + "-" + error.message


                })

            }

            $("#attributeQueryDropdown").change(onchangeOfLayerBringFields)

            $("#attributeQueryFieledDropdown").change(onChangeOfFieldUpdateValueDropDown)
            $("#attributeQueryValues").change(onChangeOfValueUpdateQueryString)

            $("#attributeQueryApply").click(onApplyBringObjects)
            $("#attributeQueryClear").click(resetAttributeParameters)
            $("#circleAndDivisionGraphicClear").click(function(){
                graphicsLayer.remove(polygonsT1);

            })
            $(".operatorForQuery").click(function(event){
                console.log(event.target.attributes[1].value)
                var arrayOfOperators = new Array;
                document.querySelectorAll(".operatorForQuery").forEach(function(item,index){
                   console.log( item.attributes[1].value)
                    arrayOfOperators.push(item.attributes[1].value)
                })
                if (queryTextField.value){
                    var oldString = queryTextField.value.toString()

                    var lengthOfPresentOperator = event.target.attributes[1].value.toString().length;
                    var lastPartOfOldString = oldString.substring((((oldString.length) - 1) - (lengthOfPresentOperator - 1)))
                    if (/*!arrayOfOperators.includes(lastPartOfOldString)*/ true ){
                   
                      if (!isCursorActive(queryTextField)){
                   
                      queryTextField.value = queryTextField.value.toString() + event.target.attributes[1].value
                       }else{
                        

                        appendTextAtCursor(queryTextField, event.target.attributes[1].value)
                    }
                    }
                    
                }
                
                console.log(event)
            })

            window.addEventListener('offline', handleOffline);
            window.addEventListener('online', handleOnline);

            function handleOffline() {
                // Code to handle internet connection loss
                alert('Internet connection lost');
            }

            function handleOnline() {
                // Code to handle internet connection recovery
                alert('System Back Online!!');
               

            }

            
        });
        

    </script>
   
  

   
}
